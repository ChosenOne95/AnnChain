// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gemmill/protos/events/events.proto

package events

import (
	fmt "fmt"
	types "github.com/dappledger/AnnChain/gemmill/protos/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EventType int32

const (
	EventType_EventNewBlock          EventType = 0
	EventType_EventNewBlockHeader    EventType = 1
	EventType_EventTx                EventType = 2
	EventType_EventRoundState        EventType = 3
	EventType_EventVote              EventType = 4
	EventType_EventSwitchToConsensus EventType = 5
	EventType_EventHookNewRound      EventType = 6
	EventType_EventHookPropose       EventType = 7
	EventType_EventHookPrecommit     EventType = 8
	EventType_EventHookCommit        EventType = 9
	EventType_EventHookExecute       EventType = 10
)

var EventType_name = map[int32]string{
	0:  "EventNewBlock",
	1:  "EventNewBlockHeader",
	2:  "EventTx",
	3:  "EventRoundState",
	4:  "EventVote",
	5:  "EventSwitchToConsensus",
	6:  "EventHookNewRound",
	7:  "EventHookPropose",
	8:  "EventHookPrecommit",
	9:  "EventHookCommit",
	10: "EventHookExecute",
}

var EventType_value = map[string]int32{
	"EventNewBlock":          0,
	"EventNewBlockHeader":    1,
	"EventTx":                2,
	"EventRoundState":        3,
	"EventVote":              4,
	"EventSwitchToConsensus": 5,
	"EventHookNewRound":      6,
	"EventHookPropose":       7,
	"EventHookPrecommit":     8,
	"EventHookCommit":        9,
	"EventHookExecute":       10,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54ed6b0a1e7da4c8, []int{0}
}

type EventDataNewBlock struct {
	Block                *types.Block `protobuf:"bytes,1,opt,name=Block,proto3" json:"Block,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EventDataNewBlock) Reset()         { *m = EventDataNewBlock{} }
func (m *EventDataNewBlock) String() string { return proto.CompactTextString(m) }
func (*EventDataNewBlock) ProtoMessage()    {}
func (*EventDataNewBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ed6b0a1e7da4c8, []int{0}
}
func (m *EventDataNewBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDataNewBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDataNewBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDataNewBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDataNewBlock.Merge(m, src)
}
func (m *EventDataNewBlock) XXX_Size() int {
	return m.Size()
}
func (m *EventDataNewBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDataNewBlock.DiscardUnknown(m)
}

var xxx_messageInfo_EventDataNewBlock proto.InternalMessageInfo

func (m *EventDataNewBlock) GetBlock() *types.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type EventDataNewBlockHeader struct {
	Header               *types.Header `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EventDataNewBlockHeader) Reset()         { *m = EventDataNewBlockHeader{} }
func (m *EventDataNewBlockHeader) String() string { return proto.CompactTextString(m) }
func (*EventDataNewBlockHeader) ProtoMessage()    {}
func (*EventDataNewBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ed6b0a1e7da4c8, []int{1}
}
func (m *EventDataNewBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDataNewBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDataNewBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDataNewBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDataNewBlockHeader.Merge(m, src)
}
func (m *EventDataNewBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *EventDataNewBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDataNewBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_EventDataNewBlockHeader proto.InternalMessageInfo

func (m *EventDataNewBlockHeader) GetHeader() *types.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type EventDataTx struct {
	Tx                   []byte         `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
	Data                 []byte         `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	Log                  string         `protobuf:"bytes,3,opt,name=Log,proto3" json:"Log,omitempty"`
	Code                 types.CodeType `protobuf:"varint,4,opt,name=Code,proto3,enum=types.CodeType" json:"Code,omitempty"`
	Error                string         `protobuf:"bytes,5,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *EventDataTx) Reset()         { *m = EventDataTx{} }
func (m *EventDataTx) String() string { return proto.CompactTextString(m) }
func (*EventDataTx) ProtoMessage()    {}
func (*EventDataTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ed6b0a1e7da4c8, []int{2}
}
func (m *EventDataTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDataTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDataTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDataTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDataTx.Merge(m, src)
}
func (m *EventDataTx) XXX_Size() int {
	return m.Size()
}
func (m *EventDataTx) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDataTx.DiscardUnknown(m)
}

var xxx_messageInfo_EventDataTx proto.InternalMessageInfo

func (m *EventDataTx) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *EventDataTx) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EventDataTx) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

func (m *EventDataTx) GetCode() types.CodeType {
	if m != nil {
		return m.Code
	}
	return types.CodeType_OK
}

func (m *EventDataTx) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type EventDataRoundState struct {
	Height               int64    `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Round                int64    `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Step                 string   `protobuf:"bytes,3,opt,name=Step,proto3" json:"Step,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventDataRoundState) Reset()         { *m = EventDataRoundState{} }
func (m *EventDataRoundState) String() string { return proto.CompactTextString(m) }
func (*EventDataRoundState) ProtoMessage()    {}
func (*EventDataRoundState) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ed6b0a1e7da4c8, []int{3}
}
func (m *EventDataRoundState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDataRoundState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDataRoundState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDataRoundState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDataRoundState.Merge(m, src)
}
func (m *EventDataRoundState) XXX_Size() int {
	return m.Size()
}
func (m *EventDataRoundState) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDataRoundState.DiscardUnknown(m)
}

var xxx_messageInfo_EventDataRoundState proto.InternalMessageInfo

func (m *EventDataRoundState) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *EventDataRoundState) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *EventDataRoundState) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

type EventDataVote struct {
	Vote                 *types.Vote `protobuf:"bytes,1,opt,name=Vote,proto3" json:"Vote,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *EventDataVote) Reset()         { *m = EventDataVote{} }
func (m *EventDataVote) String() string { return proto.CompactTextString(m) }
func (*EventDataVote) ProtoMessage()    {}
func (*EventDataVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ed6b0a1e7da4c8, []int{4}
}
func (m *EventDataVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDataVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDataVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDataVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDataVote.Merge(m, src)
}
func (m *EventDataVote) XXX_Size() int {
	return m.Size()
}
func (m *EventDataVote) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDataVote.DiscardUnknown(m)
}

var xxx_messageInfo_EventDataVote proto.InternalMessageInfo

func (m *EventDataVote) GetVote() *types.Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}

func init() {
	proto.RegisterEnum("events.EventType", EventType_name, EventType_value)
	proto.RegisterType((*EventDataNewBlock)(nil), "events.EventDataNewBlock")
	proto.RegisterType((*EventDataNewBlockHeader)(nil), "events.EventDataNewBlockHeader")
	proto.RegisterType((*EventDataTx)(nil), "events.EventDataTx")
	proto.RegisterType((*EventDataRoundState)(nil), "events.EventDataRoundState")
	proto.RegisterType((*EventDataVote)(nil), "events.EventDataVote")
}

func init() { proto.RegisterFile("gemmill/protos/events/events.proto", fileDescriptor_54ed6b0a1e7da4c8) }

var fileDescriptor_54ed6b0a1e7da4c8 = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x13, 0x27, 0x25, 0x93, 0xa6, 0xdd, 0x4e, 0x4b, 0x6a, 0xf5, 0x10, 0x22, 0x23, 0xa4,
	0x88, 0x43, 0x8c, 0x0a, 0x12, 0x57, 0x68, 0x08, 0xea, 0x01, 0x55, 0xc8, 0xb1, 0x40, 0xe2, 0xe6,
	0xda, 0x23, 0xc7, 0x6a, 0xec, 0xb5, 0xec, 0x0d, 0x71, 0x2f, 0x3c, 0x07, 0x8f, 0xc4, 0x91, 0x47,
	0x40, 0xe1, 0x15, 0x78, 0x00, 0xb4, 0x3f, 0x35, 0x14, 0x7a, 0xf1, 0xce, 0xf7, 0xcd, 0x7c, 0xdf,
	0x7e, 0x1e, 0x2d, 0xb8, 0x09, 0x65, 0x59, 0xba, 0x5a, 0x79, 0x45, 0xc9, 0x05, 0xaf, 0x3c, 0xfa,
	0x4c, 0xb9, 0xb8, 0x3d, 0xa6, 0x8a, 0xc4, 0xae, 0x46, 0xa7, 0xe3, 0x7f, 0x66, 0xc5, 0x4d, 0x41,
	0xe6, 0xab, 0x27, 0xdd, 0x97, 0x70, 0x38, 0x97, 0xb3, 0x6f, 0x42, 0x11, 0x5e, 0xd2, 0xe6, 0x7c,
	0xc5, 0xa3, 0x6b, 0x74, 0xa1, 0xa3, 0x0a, 0xc7, 0x1a, 0x5b, 0x93, 0xfe, 0xd9, 0xde, 0x54, 0x2b,
	0x14, 0xe7, 0xeb, 0x96, 0xfb, 0x0a, 0x4e, 0xfe, 0x13, 0x5e, 0x50, 0x18, 0x53, 0x89, 0x4f, 0xa0,
	0xab, 0x2b, 0xa3, 0x1f, 0x18, 0xbd, 0x26, 0x7d, 0xd3, 0x74, 0xbf, 0x40, 0xbf, 0x71, 0x08, 0x6a,
	0xdc, 0x87, 0x56, 0x50, 0x2b, 0xc5, 0x9e, 0xdf, 0x0a, 0x6a, 0x44, 0xb0, 0x65, 0xc7, 0x69, 0x29,
	0x46, 0xd5, 0xc8, 0xa0, 0xfd, 0x8e, 0x27, 0x4e, 0x7b, 0x6c, 0x4d, 0x7a, 0xbe, 0x2c, 0xf1, 0x31,
	0xd8, 0x33, 0x1e, 0x93, 0x63, 0x8f, 0xad, 0xc9, 0xfe, 0xd9, 0x81, 0xb9, 0x49, 0x52, 0xc1, 0x4d,
	0x41, 0xbe, 0x6a, 0xe2, 0x31, 0x74, 0xe6, 0x65, 0xc9, 0x4b, 0xa7, 0xa3, 0x84, 0x1a, 0xb8, 0x1f,
	0xe1, 0xa8, 0xb9, 0xdf, 0xe7, 0xeb, 0x3c, 0x5e, 0x88, 0x50, 0x10, 0x0e, 0x65, 0xfa, 0x34, 0x59,
	0x0a, 0x95, 0xa5, 0xed, 0x1b, 0x24, 0x4d, 0xd4, 0x94, 0x0a, 0xd4, 0xf6, 0x35, 0x90, 0x29, 0x17,
	0x82, 0x0a, 0x13, 0x49, 0xd5, 0xee, 0x33, 0x18, 0x34, 0xc6, 0x1f, 0xb8, 0x20, 0x7c, 0x04, 0xb6,
	0x3c, 0xcd, 0x3a, 0xfa, 0x26, 0xa4, 0xa4, 0x7c, 0xd5, 0x78, 0xfa, 0xcb, 0x82, 0x9e, 0x92, 0xc8,
	0xd0, 0x78, 0x68, 0xf4, 0xb7, 0x6b, 0x65, 0x3b, 0x78, 0x62, 0xb2, 0xde, 0xdd, 0x34, 0xb3, 0xb0,
	0x0f, 0xbb, 0x5a, 0x58, 0xb3, 0x16, 0x1e, 0xc1, 0x81, 0x02, 0x7f, 0xfe, 0x86, 0xb5, 0x71, 0x60,
	0xac, 0xe5, 0x45, 0xcc, 0xc6, 0x53, 0x18, 0x2a, 0xb8, 0xd8, 0xa4, 0x22, 0x5a, 0x06, 0x7c, 0xc6,
	0xf3, 0x8a, 0xf2, 0x6a, 0x5d, 0xb1, 0x0e, 0x3e, 0x34, 0x8f, 0xe1, 0x82, 0xf3, 0xeb, 0x4b, 0xda,
	0x28, 0x1b, 0xd6, 0xc5, 0x63, 0x60, 0x0d, 0xfd, 0xbe, 0xe4, 0x05, 0xaf, 0x88, 0xed, 0xe2, 0x10,
	0xf0, 0x2f, 0x96, 0x22, 0x9e, 0x65, 0xa9, 0x60, 0x0f, 0x9a, 0x10, 0x92, 0x9f, 0x69, 0xb2, 0x77,
	0xc7, 0x62, 0x5e, 0x53, 0xb4, 0x16, 0xc4, 0xe0, 0xfc, 0xed, 0xb7, 0xed, 0xc8, 0xfa, 0xbe, 0x1d,
	0x59, 0x3f, 0xb6, 0x23, 0xeb, 0xeb, 0xcf, 0xd1, 0xce, 0xa7, 0x17, 0x49, 0x2a, 0x96, 0xeb, 0xab,
	0x69, 0xc4, 0x33, 0x2f, 0x0e, 0x8b, 0x62, 0x45, 0x71, 0x42, 0xa5, 0xf7, 0x3a, 0xcf, 0x67, 0xcb,
	0x30, 0xcd, 0xbd, 0x7b, 0xdf, 0xfe, 0x55, 0x57, 0xc1, 0xe7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x91, 0xa3, 0x0b, 0xc5, 0x1b, 0x03, 0x00, 0x00,
}

func (m *EventDataNewBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDataNewBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDataNewBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDataNewBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDataNewBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDataNewBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDataTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDataTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDataTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Code != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Log) > 0 {
		i -= len(m.Log)
		copy(dAtA[i:], m.Log)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Log)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDataRoundState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDataRoundState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDataRoundState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Round != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventDataVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDataVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDataVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventDataNewBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventDataNewBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventDataTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Log)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovEvents(uint64(m.Code))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventDataRoundState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovEvents(uint64(m.Height))
	}
	if m.Round != 0 {
		n += 1 + sovEvents(uint64(m.Round))
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventDataVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventDataNewBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDataNewBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDataNewBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &types.Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDataNewBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDataNewBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDataNewBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &types.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDataTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDataTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDataTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = append(m.Tx[:0], dAtA[iNdEx:postIndex]...)
			if m.Tx == nil {
				m.Tx = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= types.CodeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDataRoundState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDataRoundState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDataRoundState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDataVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDataVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDataVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &types.Vote{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
