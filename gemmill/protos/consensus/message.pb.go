// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gemmill/protos/consensus/message.proto

package consensus

import (
	fmt "fmt"
	types "github.com/dappledger/AnnChain/gemmill/protos/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MsgType int32

const (
	MsgType_None         MsgType = 0
	MsgType_NewRoundStep MsgType = 1
	MsgType_CommitStep   MsgType = 2
	MsgType_Proposal     MsgType = 3
	MsgType_ProposalPOL  MsgType = 4
	MsgType_BlockPart    MsgType = 5
	MsgType_Vote         MsgType = 6
	MsgType_HasVote      MsgType = 7
	MsgType_VoteSetMaj23 MsgType = 8
	MsgType_VoteSetBits  MsgType = 9
)

var MsgType_name = map[int32]string{
	0: "None",
	1: "NewRoundStep",
	2: "CommitStep",
	3: "Proposal",
	4: "ProposalPOL",
	5: "BlockPart",
	6: "Vote",
	7: "HasVote",
	8: "VoteSetMaj23",
	9: "VoteSetBits",
}

var MsgType_value = map[string]int32{
	"None":         0,
	"NewRoundStep": 1,
	"CommitStep":   2,
	"Proposal":     3,
	"ProposalPOL":  4,
	"BlockPart":    5,
	"Vote":         6,
	"HasVote":      7,
	"VoteSetMaj23": 8,
	"VoteSetBits":  9,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}

func (MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a9863227ae0a2a12, []int{0}
}

type RoundStepType int32

const (
	RoundStepType_EnumBegin     RoundStepType = 0
	RoundStepType_NewHeight     RoundStepType = 1
	RoundStepType_NewRound      RoundStepType = 2
	RoundStepType_Propose       RoundStepType = 3
	RoundStepType_Prevote       RoundStepType = 4
	RoundStepType_PrevoteWait   RoundStepType = 5
	RoundStepType_Precommit     RoundStepType = 6
	RoundStepType_PrecommitWait RoundStepType = 7
	RoundStepType_Commit        RoundStepType = 8
)

var RoundStepType_name = map[int32]string{
	0: "EnumBegin",
	1: "NewHeight",
	2: "NewRound",
	3: "Propose",
	4: "Prevote",
	5: "PrevoteWait",
	6: "Precommit",
	7: "PrecommitWait",
	8: "Commit",
}

var RoundStepType_value = map[string]int32{
	"EnumBegin":     0,
	"NewHeight":     1,
	"NewRound":      2,
	"Propose":       3,
	"Prevote":       4,
	"PrevoteWait":   5,
	"Precommit":     6,
	"PrecommitWait": 7,
	"Commit":        8,
}

func (x RoundStepType) String() string {
	return proto.EnumName(RoundStepType_name, int32(x))
}

func (RoundStepType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a9863227ae0a2a12, []int{1}
}

type NewRoundStepMessage struct {
	Height                int64         `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Round                 int64         `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Step                  RoundStepType `protobuf:"varint,3,opt,name=Step,proto3,enum=consensus.RoundStepType" json:"Step,omitempty"`
	SecondsSinceStartTime int64         `protobuf:"varint,4,opt,name=SecondsSinceStartTime,proto3" json:"SecondsSinceStartTime,omitempty"`
	LastCommitRound       int64         `protobuf:"varint,5,opt,name=LastCommitRound,proto3" json:"LastCommitRound,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}      `json:"-"`
	XXX_unrecognized      []byte        `json:"-"`
	XXX_sizecache         int32         `json:"-"`
}

func (m *NewRoundStepMessage) Reset()         { *m = NewRoundStepMessage{} }
func (m *NewRoundStepMessage) String() string { return proto.CompactTextString(m) }
func (*NewRoundStepMessage) ProtoMessage()    {}
func (*NewRoundStepMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9863227ae0a2a12, []int{0}
}
func (m *NewRoundStepMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewRoundStepMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewRoundStepMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewRoundStepMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewRoundStepMessage.Merge(m, src)
}
func (m *NewRoundStepMessage) XXX_Size() int {
	return m.Size()
}
func (m *NewRoundStepMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NewRoundStepMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NewRoundStepMessage proto.InternalMessageInfo

func (m *NewRoundStepMessage) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *NewRoundStepMessage) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *NewRoundStepMessage) GetStep() RoundStepType {
	if m != nil {
		return m.Step
	}
	return RoundStepType_EnumBegin
}

func (m *NewRoundStepMessage) GetSecondsSinceStartTime() int64 {
	if m != nil {
		return m.SecondsSinceStartTime
	}
	return 0
}

func (m *NewRoundStepMessage) GetLastCommitRound() int64 {
	if m != nil {
		return m.LastCommitRound
	}
	return 0
}

type ProtoBitArray struct {
	Bits                 int64    `protobuf:"varint,3,opt,name=Bits,proto3" json:"Bits,omitempty"`
	Elems                []uint64 `protobuf:"varint,4,rep,packed,name=Elems,proto3" json:"Elems,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtoBitArray) Reset()         { *m = ProtoBitArray{} }
func (m *ProtoBitArray) String() string { return proto.CompactTextString(m) }
func (*ProtoBitArray) ProtoMessage()    {}
func (*ProtoBitArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9863227ae0a2a12, []int{1}
}
func (m *ProtoBitArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoBitArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtoBitArray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtoBitArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoBitArray.Merge(m, src)
}
func (m *ProtoBitArray) XXX_Size() int {
	return m.Size()
}
func (m *ProtoBitArray) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoBitArray.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoBitArray proto.InternalMessageInfo

func (m *ProtoBitArray) GetBits() int64 {
	if m != nil {
		return m.Bits
	}
	return 0
}

func (m *ProtoBitArray) GetElems() []uint64 {
	if m != nil {
		return m.Elems
	}
	return nil
}

type CommitStepMessage struct {
	Height               int64                `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	BlockPartsHeader     *types.PartSetHeader `protobuf:"bytes,2,opt,name=BlockPartsHeader,proto3" json:"BlockPartsHeader,omitempty"`
	BlockParts           *ProtoBitArray       `protobuf:"bytes,3,opt,name=BlockParts,proto3" json:"BlockParts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CommitStepMessage) Reset()         { *m = CommitStepMessage{} }
func (m *CommitStepMessage) String() string { return proto.CompactTextString(m) }
func (*CommitStepMessage) ProtoMessage()    {}
func (*CommitStepMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9863227ae0a2a12, []int{2}
}
func (m *CommitStepMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitStepMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitStepMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitStepMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitStepMessage.Merge(m, src)
}
func (m *CommitStepMessage) XXX_Size() int {
	return m.Size()
}
func (m *CommitStepMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitStepMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CommitStepMessage proto.InternalMessageInfo

func (m *CommitStepMessage) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *CommitStepMessage) GetBlockPartsHeader() *types.PartSetHeader {
	if m != nil {
		return m.BlockPartsHeader
	}
	return nil
}

func (m *CommitStepMessage) GetBlockParts() *ProtoBitArray {
	if m != nil {
		return m.BlockParts
	}
	return nil
}

type ProposalMessage struct {
	Proposal             *types.Proposal `protobuf:"bytes,1,opt,name=Proposal,proto3" json:"Proposal,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ProposalMessage) Reset()         { *m = ProposalMessage{} }
func (m *ProposalMessage) String() string { return proto.CompactTextString(m) }
func (*ProposalMessage) ProtoMessage()    {}
func (*ProposalMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9863227ae0a2a12, []int{3}
}
func (m *ProposalMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalMessage.Merge(m, src)
}
func (m *ProposalMessage) XXX_Size() int {
	return m.Size()
}
func (m *ProposalMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalMessage proto.InternalMessageInfo

func (m *ProposalMessage) GetProposal() *types.Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

type ProposalPOLMessage struct {
	Height               int64          `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	ProposalPOLRound     int64          `protobuf:"varint,2,opt,name=ProposalPOLRound,proto3" json:"ProposalPOLRound,omitempty"`
	ProposalPOL          *ProtoBitArray `protobuf:"bytes,3,opt,name=ProposalPOL,proto3" json:"ProposalPOL,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ProposalPOLMessage) Reset()         { *m = ProposalPOLMessage{} }
func (m *ProposalPOLMessage) String() string { return proto.CompactTextString(m) }
func (*ProposalPOLMessage) ProtoMessage()    {}
func (*ProposalPOLMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9863227ae0a2a12, []int{4}
}
func (m *ProposalPOLMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalPOLMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalPOLMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalPOLMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalPOLMessage.Merge(m, src)
}
func (m *ProposalPOLMessage) XXX_Size() int {
	return m.Size()
}
func (m *ProposalPOLMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalPOLMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalPOLMessage proto.InternalMessageInfo

func (m *ProposalPOLMessage) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ProposalPOLMessage) GetProposalPOLRound() int64 {
	if m != nil {
		return m.ProposalPOLRound
	}
	return 0
}

func (m *ProposalPOLMessage) GetProposalPOL() *ProtoBitArray {
	if m != nil {
		return m.ProposalPOL
	}
	return nil
}

type BlockPartMessage struct {
	Height               int64       `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Round                int64       `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Part                 *types.Part `protobuf:"bytes,3,opt,name=Part,proto3" json:"Part,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *BlockPartMessage) Reset()         { *m = BlockPartMessage{} }
func (m *BlockPartMessage) String() string { return proto.CompactTextString(m) }
func (*BlockPartMessage) ProtoMessage()    {}
func (*BlockPartMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9863227ae0a2a12, []int{5}
}
func (m *BlockPartMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockPartMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockPartMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockPartMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockPartMessage.Merge(m, src)
}
func (m *BlockPartMessage) XXX_Size() int {
	return m.Size()
}
func (m *BlockPartMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockPartMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BlockPartMessage proto.InternalMessageInfo

func (m *BlockPartMessage) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockPartMessage) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *BlockPartMessage) GetPart() *types.Part {
	if m != nil {
		return m.Part
	}
	return nil
}

type VoteMessage struct {
	Vote                 *types.Vote `protobuf:"bytes,1,opt,name=Vote,proto3" json:"Vote,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *VoteMessage) Reset()         { *m = VoteMessage{} }
func (m *VoteMessage) String() string { return proto.CompactTextString(m) }
func (*VoteMessage) ProtoMessage()    {}
func (*VoteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9863227ae0a2a12, []int{6}
}
func (m *VoteMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteMessage.Merge(m, src)
}
func (m *VoteMessage) XXX_Size() int {
	return m.Size()
}
func (m *VoteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VoteMessage proto.InternalMessageInfo

func (m *VoteMessage) GetVote() *types.Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}

type HasVoteMessage struct {
	Height               int64          `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Round                int64          `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Type                 types.VoteType `protobuf:"varint,3,opt,name=Type,proto3,enum=types.VoteType" json:"Type,omitempty"`
	Index                int64          `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *HasVoteMessage) Reset()         { *m = HasVoteMessage{} }
func (m *HasVoteMessage) String() string { return proto.CompactTextString(m) }
func (*HasVoteMessage) ProtoMessage()    {}
func (*HasVoteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9863227ae0a2a12, []int{7}
}
func (m *HasVoteMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HasVoteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HasVoteMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HasVoteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasVoteMessage.Merge(m, src)
}
func (m *HasVoteMessage) XXX_Size() int {
	return m.Size()
}
func (m *HasVoteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HasVoteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HasVoteMessage proto.InternalMessageInfo

func (m *HasVoteMessage) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *HasVoteMessage) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *HasVoteMessage) GetType() types.VoteType {
	if m != nil {
		return m.Type
	}
	return types.VoteType_None
}

func (m *HasVoteMessage) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type VoteSetMaj23Message struct {
	Height               int64          `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Round                int64          `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Type                 types.VoteType `protobuf:"varint,3,opt,name=Type,proto3,enum=types.VoteType" json:"Type,omitempty"`
	BlockID              *types.BlockID `protobuf:"bytes,4,opt,name=BlockID,proto3" json:"BlockID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VoteSetMaj23Message) Reset()         { *m = VoteSetMaj23Message{} }
func (m *VoteSetMaj23Message) String() string { return proto.CompactTextString(m) }
func (*VoteSetMaj23Message) ProtoMessage()    {}
func (*VoteSetMaj23Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9863227ae0a2a12, []int{8}
}
func (m *VoteSetMaj23Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteSetMaj23Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteSetMaj23Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteSetMaj23Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteSetMaj23Message.Merge(m, src)
}
func (m *VoteSetMaj23Message) XXX_Size() int {
	return m.Size()
}
func (m *VoteSetMaj23Message) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteSetMaj23Message.DiscardUnknown(m)
}

var xxx_messageInfo_VoteSetMaj23Message proto.InternalMessageInfo

func (m *VoteSetMaj23Message) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *VoteSetMaj23Message) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *VoteSetMaj23Message) GetType() types.VoteType {
	if m != nil {
		return m.Type
	}
	return types.VoteType_None
}

func (m *VoteSetMaj23Message) GetBlockID() *types.BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

type VoteSetBitsMessage struct {
	Height               int64          `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Round                int64          `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Type                 types.VoteType `protobuf:"varint,3,opt,name=Type,proto3,enum=types.VoteType" json:"Type,omitempty"`
	BlockID              *types.BlockID `protobuf:"bytes,4,opt,name=BlockID,proto3" json:"BlockID,omitempty"`
	Votes                *ProtoBitArray `protobuf:"bytes,5,opt,name=Votes,proto3" json:"Votes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VoteSetBitsMessage) Reset()         { *m = VoteSetBitsMessage{} }
func (m *VoteSetBitsMessage) String() string { return proto.CompactTextString(m) }
func (*VoteSetBitsMessage) ProtoMessage()    {}
func (*VoteSetBitsMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9863227ae0a2a12, []int{9}
}
func (m *VoteSetBitsMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteSetBitsMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteSetBitsMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteSetBitsMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteSetBitsMessage.Merge(m, src)
}
func (m *VoteSetBitsMessage) XXX_Size() int {
	return m.Size()
}
func (m *VoteSetBitsMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteSetBitsMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VoteSetBitsMessage proto.InternalMessageInfo

func (m *VoteSetBitsMessage) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *VoteSetBitsMessage) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *VoteSetBitsMessage) GetType() types.VoteType {
	if m != nil {
		return m.Type
	}
	return types.VoteType_None
}

func (m *VoteSetBitsMessage) GetBlockID() *types.BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

func (m *VoteSetBitsMessage) GetVotes() *ProtoBitArray {
	if m != nil {
		return m.Votes
	}
	return nil
}

type ConsensusMessage struct {
	Type                 MsgType  `protobuf:"varint,1,opt,name=Type,proto3,enum=consensus.MsgType" json:"Type,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsensusMessage) Reset()         { *m = ConsensusMessage{} }
func (m *ConsensusMessage) String() string { return proto.CompactTextString(m) }
func (*ConsensusMessage) ProtoMessage()    {}
func (*ConsensusMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9863227ae0a2a12, []int{10}
}
func (m *ConsensusMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusMessage.Merge(m, src)
}
func (m *ConsensusMessage) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusMessage proto.InternalMessageInfo

func (m *ConsensusMessage) GetType() MsgType {
	if m != nil {
		return m.Type
	}
	return MsgType_None
}

func (m *ConsensusMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("consensus.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("consensus.RoundStepType", RoundStepType_name, RoundStepType_value)
	proto.RegisterType((*NewRoundStepMessage)(nil), "consensus.NewRoundStepMessage")
	proto.RegisterType((*ProtoBitArray)(nil), "consensus.ProtoBitArray")
	proto.RegisterType((*CommitStepMessage)(nil), "consensus.CommitStepMessage")
	proto.RegisterType((*ProposalMessage)(nil), "consensus.ProposalMessage")
	proto.RegisterType((*ProposalPOLMessage)(nil), "consensus.ProposalPOLMessage")
	proto.RegisterType((*BlockPartMessage)(nil), "consensus.BlockPartMessage")
	proto.RegisterType((*VoteMessage)(nil), "consensus.VoteMessage")
	proto.RegisterType((*HasVoteMessage)(nil), "consensus.HasVoteMessage")
	proto.RegisterType((*VoteSetMaj23Message)(nil), "consensus.VoteSetMaj23Message")
	proto.RegisterType((*VoteSetBitsMessage)(nil), "consensus.VoteSetBitsMessage")
	proto.RegisterType((*ConsensusMessage)(nil), "consensus.ConsensusMessage")
}

func init() {
	proto.RegisterFile("gemmill/protos/consensus/message.proto", fileDescriptor_a9863227ae0a2a12)
}

var fileDescriptor_a9863227ae0a2a12 = []byte{
	// 734 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xae, 0x9b, 0xcd, 0xdf, 0x6c, 0x93, 0xb8, 0x6e, 0x41, 0x11, 0x87, 0x34, 0x5a, 0xa4, 0x2a,
	0x2a, 0x28, 0x91, 0x52, 0x24, 0x7e, 0x0e, 0x88, 0xa6, 0xad, 0xd4, 0x4a, 0x6d, 0x88, 0x36, 0x15,
	0x48, 0xdc, 0xdc, 0xc4, 0x4a, 0x17, 0xb2, 0x3f, 0x5a, 0x3b, 0x94, 0xbc, 0x06, 0xea, 0x81, 0x0b,
	0x67, 0x9e, 0x83, 0x1b, 0x47, 0x78, 0x03, 0x54, 0x5e, 0x04, 0xd9, 0xde, 0x4d, 0x9d, 0x16, 0x28,
	0x20, 0x21, 0x71, 0x89, 0x76, 0xbe, 0xf9, 0x66, 0xfc, 0xcd, 0x78, 0xc6, 0x81, 0xf5, 0x11, 0xf3,
	0x7d, 0x6f, 0x3c, 0x6e, 0x45, 0x71, 0x28, 0x42, 0xde, 0x1a, 0x84, 0x01, 0x67, 0x01, 0x9f, 0xf0,
	0x96, 0xcf, 0x38, 0xa7, 0x23, 0xd6, 0x54, 0x0e, 0x52, 0x9c, 0x39, 0x6e, 0xd5, 0x2f, 0x85, 0x88,
	0x69, 0xc4, 0x92, 0x5f, 0x4d, 0x76, 0xbe, 0x20, 0x58, 0xe9, 0xb2, 0x53, 0x37, 0x9c, 0x04, 0xc3,
	0xbe, 0x60, 0xd1, 0xa1, 0x4e, 0x45, 0x6e, 0x42, 0x6e, 0x8f, 0x79, 0xa3, 0x13, 0x51, 0x45, 0x75,
	0xd4, 0xc8, 0xb8, 0x89, 0x45, 0x56, 0x21, 0xab, 0xb8, 0xd5, 0x45, 0x05, 0x6b, 0x83, 0xdc, 0x05,
	0x4b, 0x06, 0x57, 0x33, 0x75, 0xd4, 0x28, 0xb7, 0xab, 0xcd, 0x99, 0x82, 0xe6, 0x2c, 0xf1, 0xd1,
	0x34, 0x62, 0xae, 0x62, 0x91, 0x7b, 0x70, 0xa3, 0xcf, 0x06, 0x61, 0x30, 0xe4, 0x7d, 0x2f, 0x18,
	0xb0, 0xbe, 0xa0, 0xb1, 0x38, 0xf2, 0x7c, 0x56, 0xb5, 0x54, 0xce, 0x1f, 0x3b, 0x49, 0x03, 0x2a,
	0x07, 0x94, 0x8b, 0xed, 0xd0, 0xf7, 0x3d, 0xa1, 0x35, 0x64, 0x15, 0xff, 0x32, 0xec, 0x3c, 0x84,
	0x52, 0x4f, 0x16, 0xd7, 0xf1, 0xc4, 0x56, 0x1c, 0xd3, 0x29, 0x21, 0x60, 0x75, 0x3c, 0xc1, 0x95,
	0xbc, 0x8c, 0xab, 0xbe, 0x65, 0x21, 0xbb, 0x63, 0xe6, 0xf3, 0xaa, 0x55, 0xcf, 0x34, 0x2c, 0x57,
	0x1b, 0xce, 0x07, 0x04, 0xcb, 0x3a, 0xd5, 0xef, 0x34, 0xe3, 0x09, 0xe0, 0xce, 0x38, 0x1c, 0xbc,
	0xea, 0xd1, 0x58, 0xf0, 0x3d, 0x46, 0x87, 0x2c, 0x56, 0x7d, 0xb1, 0xdb, 0xab, 0x4d, 0xdd, 0x64,
	0xe9, 0xe9, 0x33, 0xa1, 0x7d, 0xee, 0x15, 0x36, 0x79, 0x00, 0x70, 0x81, 0x29, 0x7d, 0xf6, 0x5c,
	0xfb, 0xe6, 0xea, 0x70, 0x0d, 0xae, 0xf3, 0x18, 0x2a, 0xbd, 0x38, 0x8c, 0x42, 0x4e, 0xc7, 0xa9,
	0xcc, 0x3b, 0x50, 0x48, 0x21, 0x25, 0xd4, 0x6e, 0x57, 0x52, 0x19, 0x09, 0xec, 0xce, 0x08, 0xce,
	0x19, 0x02, 0x92, 0x1a, 0xbd, 0xa7, 0x07, 0xd7, 0x95, 0xba, 0x01, 0xd8, 0x60, 0x9b, 0x23, 0x70,
	0x05, 0x27, 0x8f, 0xc0, 0x36, 0xb0, 0x6b, 0xab, 0x32, 0xc9, 0x0e, 0x35, 0x5a, 0xfa, 0x77, 0xb3,
	0xb8, 0x06, 0x96, 0x0c, 0x4e, 0x8e, 0xb5, 0x8d, 0x8b, 0x70, 0x95, 0xc3, 0x69, 0x82, 0xfd, 0x2c,
	0x14, 0x2c, 0xcd, 0xbe, 0x06, 0x96, 0x34, 0x93, 0x8e, 0xa5, 0x7c, 0x09, 0xb9, 0xca, 0xe1, 0x4c,
	0xa1, 0xbc, 0x47, 0xb9, 0x19, 0xf2, 0x67, 0x82, 0x6e, 0x83, 0x25, 0x87, 0x3f, 0x59, 0x8e, 0x8a,
	0x71, 0x80, 0xde, 0x09, 0xf9, 0x2b, 0x43, 0xf7, 0x83, 0x21, 0x7b, 0x93, 0xec, 0x80, 0x36, 0x9c,
	0xb7, 0x08, 0x56, 0x24, 0xb1, 0xcf, 0xc4, 0x21, 0x7d, 0xd9, 0xde, 0xfc, 0x87, 0x02, 0x1a, 0x90,
	0x57, 0x8d, 0xdf, 0xdf, 0x51, 0x12, 0xec, 0x76, 0x39, 0xe1, 0x25, 0xa8, 0x9b, 0xba, 0x9d, 0x8f,
	0x08, 0x48, 0x22, 0x4a, 0x6e, 0xd2, 0xff, 0xa0, 0x89, 0x34, 0x21, 0x2b, 0x63, 0xb9, 0x7a, 0x12,
	0x7e, 0x35, 0x6c, 0x9a, 0xe6, 0x74, 0x01, 0x6f, 0xa7, 0x8c, 0xb4, 0x80, 0xf5, 0x44, 0x12, 0x52,
	0x92, 0x88, 0x91, 0xe2, 0x90, 0x8f, 0x0c, 0x55, 0x04, 0xac, 0x1d, 0x2a, 0xa8, 0xaa, 0x67, 0xc9,
	0x55, 0xdf, 0x1b, 0xef, 0x11, 0xe4, 0x13, 0x16, 0x29, 0x80, 0xd5, 0x0d, 0x03, 0x86, 0x17, 0x08,
	0x86, 0x25, 0xf3, 0x6d, 0xc5, 0x88, 0x94, 0x01, 0x2e, 0x9e, 0x17, 0xbc, 0x48, 0x96, 0x2e, 0x56,
	0x16, 0x67, 0x48, 0x65, 0x6e, 0x71, 0xb0, 0x45, 0x4a, 0x50, 0x9c, 0x6d, 0x03, 0xce, 0xca, 0xcc,
	0x52, 0x3e, 0xce, 0x11, 0x1b, 0xf2, 0xc9, 0x4c, 0xe2, 0xbc, 0x3c, 0xc6, 0x1c, 0x12, 0x5c, 0x90,
	0x89, 0x8c, 0x1b, 0xc2, 0xc5, 0x8d, 0x33, 0x04, 0xa5, 0xb9, 0xa7, 0x58, 0xa6, 0xde, 0x0d, 0x26,
	0x7e, 0x87, 0x8d, 0xbc, 0x00, 0x2f, 0x48, 0xb3, 0xcb, 0x4e, 0xf5, 0x95, 0x61, 0x24, 0x75, 0xa5,
	0xca, 0xf1, 0xa2, 0x3c, 0x4d, 0xeb, 0x62, 0x38, 0xa3, 0x0d, 0xf6, 0x5a, 0x1e, 0x6d, 0x69, 0xc5,
	0xca, 0x78, 0x4e, 0x3d, 0x29, 0xb1, 0x04, 0xc5, 0x5e, 0xcc, 0x06, 0xaa, 0x46, 0x9c, 0x23, 0xcb,
	0xf2, 0x29, 0x4e, 0x4c, 0xc5, 0xc8, 0x13, 0x80, 0x9c, 0x6e, 0x01, 0x2e, 0x74, 0xf6, 0x3f, 0x9d,
	0xd7, 0xd0, 0xe7, 0xf3, 0x1a, 0xfa, 0x7a, 0x5e, 0x43, 0xef, 0xbe, 0xd5, 0x16, 0x5e, 0xdc, 0x1f,
	0x79, 0xe2, 0x64, 0x72, 0xdc, 0x1c, 0x84, 0x7e, 0x6b, 0x48, 0xa3, 0x68, 0xcc, 0x86, 0x23, 0x16,
	0xb7, 0xb6, 0x82, 0x60, 0xfb, 0x84, 0x7a, 0x41, 0xeb, 0x67, 0xff, 0x81, 0xc7, 0x39, 0x85, 0x6c,
	0x7e, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x5b, 0xc5, 0x26, 0x26, 0x07, 0x00, 0x00,
}

func (m *NewRoundStepMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewRoundStepMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewRoundStepMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastCommitRound != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastCommitRound))
		i--
		dAtA[i] = 0x28
	}
	if m.SecondsSinceStartTime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SecondsSinceStartTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Step != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Step))
		i--
		dAtA[i] = 0x18
	}
	if m.Round != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProtoBitArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoBitArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoBitArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Elems) > 0 {
		dAtA2 := make([]byte, len(m.Elems)*10)
		var j1 int
		for _, num := range m.Elems {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMessage(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if m.Bits != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Bits))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *CommitStepMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitStepMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitStepMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BlockParts != nil {
		{
			size, err := m.BlockParts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockPartsHeader != nil {
		{
			size, err := m.BlockPartsHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProposalMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Proposal != nil {
		{
			size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalPOLMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalPOLMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalPOLMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ProposalPOL != nil {
		{
			size, err := m.ProposalPOL.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ProposalPOLRound != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ProposalPOLRound))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockPartMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockPartMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockPartMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Part != nil {
		{
			size, err := m.Part.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Round != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HasVoteMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HasVoteMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HasVoteMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Index != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Round != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteSetMaj23Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteSetMaj23Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteSetMaj23Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BlockID != nil {
		{
			size, err := m.BlockID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Round != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteSetBitsMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteSetBitsMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteSetBitsMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Votes != nil {
		{
			size, err := m.Votes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockID != nil {
		{
			size, err := m.BlockID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Round != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NewRoundStepMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	if m.Round != 0 {
		n += 1 + sovMessage(uint64(m.Round))
	}
	if m.Step != 0 {
		n += 1 + sovMessage(uint64(m.Step))
	}
	if m.SecondsSinceStartTime != 0 {
		n += 1 + sovMessage(uint64(m.SecondsSinceStartTime))
	}
	if m.LastCommitRound != 0 {
		n += 1 + sovMessage(uint64(m.LastCommitRound))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoBitArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bits != 0 {
		n += 1 + sovMessage(uint64(m.Bits))
	}
	if len(m.Elems) > 0 {
		l = 0
		for _, e := range m.Elems {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommitStepMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	if m.BlockPartsHeader != nil {
		l = m.BlockPartsHeader.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.BlockParts != nil {
		l = m.BlockParts.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProposalMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProposalPOLMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	if m.ProposalPOLRound != 0 {
		n += 1 + sovMessage(uint64(m.ProposalPOLRound))
	}
	if m.ProposalPOL != nil {
		l = m.ProposalPOL.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockPartMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	if m.Round != 0 {
		n += 1 + sovMessage(uint64(m.Round))
	}
	if m.Part != nil {
		l = m.Part.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HasVoteMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	if m.Round != 0 {
		n += 1 + sovMessage(uint64(m.Round))
	}
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	if m.Index != 0 {
		n += 1 + sovMessage(uint64(m.Index))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteSetMaj23Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	if m.Round != 0 {
		n += 1 + sovMessage(uint64(m.Round))
	}
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	if m.BlockID != nil {
		l = m.BlockID.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteSetBitsMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	if m.Round != 0 {
		n += 1 + sovMessage(uint64(m.Round))
	}
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	if m.BlockID != nil {
		l = m.BlockID.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Votes != nil {
		l = m.Votes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NewRoundStepMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewRoundStepMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewRoundStepMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= RoundStepType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondsSinceStartTime", wireType)
			}
			m.SecondsSinceStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondsSinceStartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommitRound", wireType)
			}
			m.LastCommitRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCommitRound |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoBitArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoBitArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoBitArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bits", wireType)
			}
			m.Bits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bits |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Elems = append(m.Elems, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Elems) == 0 {
					m.Elems = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Elems = append(m.Elems, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Elems", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitStepMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitStepMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitStepMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockPartsHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockPartsHeader == nil {
				m.BlockPartsHeader = &types.PartSetHeader{}
			}
			if err := m.BlockPartsHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockParts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockParts == nil {
				m.BlockParts = &ProtoBitArray{}
			}
			if err := m.BlockParts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposal == nil {
				m.Proposal = &types.Proposal{}
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalPOLMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalPOLMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalPOLMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPOLRound", wireType)
			}
			m.ProposalPOLRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalPOLRound |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPOL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalPOL == nil {
				m.ProposalPOL = &ProtoBitArray{}
			}
			if err := m.ProposalPOL.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockPartMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockPartMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockPartMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Part", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Part == nil {
				m.Part = &types.Part{}
			}
			if err := m.Part.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &types.Vote{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HasVoteMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HasVoteMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HasVoteMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= types.VoteType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteSetMaj23Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteSetMaj23Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteSetMaj23Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= types.VoteType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockID == nil {
				m.BlockID = &types.BlockID{}
			}
			if err := m.BlockID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteSetBitsMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteSetBitsMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteSetBitsMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= types.VoteType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockID == nil {
				m.BlockID = &types.BlockID{}
			}
			if err := m.BlockID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Votes == nil {
				m.Votes = &ProtoBitArray{}
			}
			if err := m.Votes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
