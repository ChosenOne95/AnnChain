// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gemmill/protos/p2p/p2p.proto

package p2p

import (
	fmt "fmt"
	crypto "github.com/dappledger/AnnChain/gemmill/protos/crypto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NodeInfo struct {
	PubKey               *crypto.PubKey `protobuf:"bytes,1,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	SigndPubKey          string         `protobuf:"bytes,2,opt,name=SigndPubKey,proto3" json:"SigndPubKey,omitempty"`
	Moniker              string         `protobuf:"bytes,3,opt,name=Moniker,proto3" json:"Moniker,omitempty"`
	Network              string         `protobuf:"bytes,4,opt,name=Network,proto3" json:"Network,omitempty"`
	RemoteAddr           string         `protobuf:"bytes,5,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	ListenAddr           string         `protobuf:"bytes,6,opt,name=ListenAddr,proto3" json:"ListenAddr,omitempty"`
	Version              string         `protobuf:"bytes,7,opt,name=Version,proto3" json:"Version,omitempty"`
	Other                []string       `protobuf:"bytes,8,rep,name=Other,proto3" json:"Other,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6120075053a70c37, []int{0}
}
func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(m, src)
}
func (m *NodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetPubKey() *crypto.PubKey {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *NodeInfo) GetSigndPubKey() string {
	if m != nil {
		return m.SigndPubKey
	}
	return ""
}

func (m *NodeInfo) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *NodeInfo) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *NodeInfo) GetRemoteAddr() string {
	if m != nil {
		return m.RemoteAddr
	}
	return ""
}

func (m *NodeInfo) GetListenAddr() string {
	if m != nil {
		return m.ListenAddr
	}
	return ""
}

func (m *NodeInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *NodeInfo) GetOther() []string {
	if m != nil {
		return m.Other
	}
	return nil
}

type FlowStatus struct {
	Active               bool     `protobuf:"varint,1,opt,name=Active,proto3" json:"Active,omitempty"`
	Start                int64    `protobuf:"varint,2,opt,name=Start,proto3" json:"Start,omitempty"`
	Duration             int64    `protobuf:"varint,3,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Idle                 int64    `protobuf:"varint,4,opt,name=Idle,proto3" json:"Idle,omitempty"`
	Bytes                int64    `protobuf:"varint,5,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	Samples              int64    `protobuf:"varint,6,opt,name=Samples,proto3" json:"Samples,omitempty"`
	InstRate             int64    `protobuf:"varint,7,opt,name=InstRate,proto3" json:"InstRate,omitempty"`
	CurRate              int64    `protobuf:"varint,8,opt,name=CurRate,proto3" json:"CurRate,omitempty"`
	AvgRate              int64    `protobuf:"varint,9,opt,name=AvgRate,proto3" json:"AvgRate,omitempty"`
	PeakRate             int64    `protobuf:"varint,10,opt,name=PeakRate,proto3" json:"PeakRate,omitempty"`
	BytesRem             int64    `protobuf:"varint,11,opt,name=BytesRem,proto3" json:"BytesRem,omitempty"`
	TimeRem              int64    `protobuf:"varint,12,opt,name=TimeRem,proto3" json:"TimeRem,omitempty"`
	Progress             uint32   `protobuf:"varint,13,opt,name=Progress,proto3" json:"Progress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowStatus) Reset()         { *m = FlowStatus{} }
func (m *FlowStatus) String() string { return proto.CompactTextString(m) }
func (*FlowStatus) ProtoMessage()    {}
func (*FlowStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6120075053a70c37, []int{1}
}
func (m *FlowStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowStatus.Merge(m, src)
}
func (m *FlowStatus) XXX_Size() int {
	return m.Size()
}
func (m *FlowStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowStatus.DiscardUnknown(m)
}

var xxx_messageInfo_FlowStatus proto.InternalMessageInfo

func (m *FlowStatus) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *FlowStatus) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *FlowStatus) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *FlowStatus) GetIdle() int64 {
	if m != nil {
		return m.Idle
	}
	return 0
}

func (m *FlowStatus) GetBytes() int64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

func (m *FlowStatus) GetSamples() int64 {
	if m != nil {
		return m.Samples
	}
	return 0
}

func (m *FlowStatus) GetInstRate() int64 {
	if m != nil {
		return m.InstRate
	}
	return 0
}

func (m *FlowStatus) GetCurRate() int64 {
	if m != nil {
		return m.CurRate
	}
	return 0
}

func (m *FlowStatus) GetAvgRate() int64 {
	if m != nil {
		return m.AvgRate
	}
	return 0
}

func (m *FlowStatus) GetPeakRate() int64 {
	if m != nil {
		return m.PeakRate
	}
	return 0
}

func (m *FlowStatus) GetBytesRem() int64 {
	if m != nil {
		return m.BytesRem
	}
	return 0
}

func (m *FlowStatus) GetTimeRem() int64 {
	if m != nil {
		return m.TimeRem
	}
	return 0
}

func (m *FlowStatus) GetProgress() uint32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

type ChannelStatus struct {
	ID                   uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SendQueueCapacity    int32    `protobuf:"varint,2,opt,name=SendQueueCapacity,proto3" json:"SendQueueCapacity,omitempty"`
	SendQueueSize        int32    `protobuf:"varint,3,opt,name=SendQueueSize,proto3" json:"SendQueueSize,omitempty"`
	Priority             int32    `protobuf:"varint,4,opt,name=Priority,proto3" json:"Priority,omitempty"`
	RecentlySent         int64    `protobuf:"varint,5,opt,name=RecentlySent,proto3" json:"RecentlySent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelStatus) Reset()         { *m = ChannelStatus{} }
func (m *ChannelStatus) String() string { return proto.CompactTextString(m) }
func (*ChannelStatus) ProtoMessage()    {}
func (*ChannelStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6120075053a70c37, []int{2}
}
func (m *ChannelStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelStatus.Merge(m, src)
}
func (m *ChannelStatus) XXX_Size() int {
	return m.Size()
}
func (m *ChannelStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelStatus proto.InternalMessageInfo

func (m *ChannelStatus) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ChannelStatus) GetSendQueueCapacity() int32 {
	if m != nil {
		return m.SendQueueCapacity
	}
	return 0
}

func (m *ChannelStatus) GetSendQueueSize() int32 {
	if m != nil {
		return m.SendQueueSize
	}
	return 0
}

func (m *ChannelStatus) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *ChannelStatus) GetRecentlySent() int64 {
	if m != nil {
		return m.RecentlySent
	}
	return 0
}

type ConnectionStatus struct {
	SendMonitor          *FlowStatus      `protobuf:"bytes,1,opt,name=SendMonitor,proto3" json:"SendMonitor,omitempty"`
	RecvMonitor          *FlowStatus      `protobuf:"bytes,2,opt,name=RecvMonitor,proto3" json:"RecvMonitor,omitempty"`
	Channels             []*ChannelStatus `protobuf:"bytes,3,rep,name=Channels,proto3" json:"Channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ConnectionStatus) Reset()         { *m = ConnectionStatus{} }
func (m *ConnectionStatus) String() string { return proto.CompactTextString(m) }
func (*ConnectionStatus) ProtoMessage()    {}
func (*ConnectionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6120075053a70c37, []int{3}
}
func (m *ConnectionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionStatus.Merge(m, src)
}
func (m *ConnectionStatus) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionStatus proto.InternalMessageInfo

func (m *ConnectionStatus) GetSendMonitor() *FlowStatus {
	if m != nil {
		return m.SendMonitor
	}
	return nil
}

func (m *ConnectionStatus) GetRecvMonitor() *FlowStatus {
	if m != nil {
		return m.RecvMonitor
	}
	return nil
}

func (m *ConnectionStatus) GetChannels() []*ChannelStatus {
	if m != nil {
		return m.Channels
	}
	return nil
}

func init() {
	proto.RegisterType((*NodeInfo)(nil), "p2p.NodeInfo")
	proto.RegisterType((*FlowStatus)(nil), "p2p.FlowStatus")
	proto.RegisterType((*ChannelStatus)(nil), "p2p.ChannelStatus")
	proto.RegisterType((*ConnectionStatus)(nil), "p2p.ConnectionStatus")
}

func init() { proto.RegisterFile("gemmill/protos/p2p/p2p.proto", fileDescriptor_6120075053a70c37) }

var fileDescriptor_6120075053a70c37 = []byte{
	// 592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0x4f, 0x6e, 0xd3, 0x40,
	0x14, 0xc6, 0x71, 0xdc, 0xa4, 0xee, 0xa4, 0x29, 0x30, 0x42, 0xc8, 0xaa, 0x50, 0x64, 0x59, 0x08,
	0x65, 0x81, 0x12, 0x35, 0x9c, 0x20, 0x75, 0x85, 0x14, 0x01, 0xa5, 0x8c, 0x11, 0x0b, 0x76, 0xae,
	0xfd, 0x70, 0x46, 0xb1, 0x67, 0xac, 0xf1, 0x38, 0x55, 0x38, 0x09, 0x47, 0x60, 0xcf, 0x25, 0x58,
	0xb2, 0x64, 0x89, 0xc2, 0x25, 0x58, 0xa2, 0xf9, 0x13, 0x37, 0xa1, 0x62, 0x11, 0xc5, 0xdf, 0xfb,
	0x7d, 0xef, 0xf3, 0xbc, 0xf1, 0xd8, 0xe8, 0x49, 0x0e, 0x65, 0x49, 0x8b, 0x62, 0x52, 0x09, 0x2e,
	0x79, 0x3d, 0xa9, 0xa6, 0x95, 0xfa, 0x8d, 0xb5, 0xc4, 0x6e, 0x35, 0xad, 0x4e, 0xc3, 0x7f, 0x2c,
	0xa9, 0x58, 0x57, 0x92, 0xdb, 0x3f, 0x63, 0x0c, 0xff, 0x38, 0xc8, 0xbb, 0xe4, 0x19, 0xcc, 0xd9,
	0x27, 0x8e, 0x9f, 0xa1, 0xde, 0x55, 0x73, 0xfd, 0x0a, 0xd6, 0xbe, 0x13, 0x38, 0xa3, 0xfe, 0xf4,
	0x64, 0x6c, 0xbd, 0xa6, 0x4a, 0x2c, 0xc5, 0x01, 0xea, 0xc7, 0x34, 0x67, 0x99, 0x35, 0x77, 0x02,
	0x67, 0x74, 0x44, 0x76, 0x4b, 0xd8, 0x47, 0x87, 0x6f, 0x38, 0xa3, 0x4b, 0x10, 0xbe, 0xab, 0xe9,
	0x56, 0x2a, 0x72, 0x09, 0xf2, 0x86, 0x8b, 0xa5, 0x7f, 0x60, 0x88, 0x95, 0x78, 0x88, 0x10, 0x81,
	0x92, 0x4b, 0x98, 0x65, 0x99, 0xf0, 0xbb, 0x1a, 0xee, 0x54, 0x14, 0x7f, 0x4d, 0x6b, 0x09, 0x4c,
	0xf3, 0x9e, 0xe1, 0xb7, 0x15, 0x95, 0xfc, 0x01, 0x44, 0x4d, 0x39, 0xf3, 0x0f, 0x4d, 0xb2, 0x95,
	0xf8, 0x11, 0xea, 0xbe, 0x95, 0x0b, 0x10, 0xbe, 0x17, 0xb8, 0xa3, 0x23, 0x62, 0x44, 0xf8, 0xb3,
	0x83, 0xd0, 0xcb, 0x82, 0xdf, 0xc4, 0x32, 0x91, 0x4d, 0x8d, 0x1f, 0xa3, 0xde, 0x2c, 0x95, 0x74,
	0x05, 0x7a, 0x78, 0x8f, 0x58, 0xa5, 0x9a, 0x63, 0x99, 0x08, 0xa9, 0xc7, 0x74, 0x89, 0x11, 0xf8,
	0x14, 0x79, 0x17, 0x8d, 0x48, 0xa4, 0xba, 0x9b, 0xab, 0x41, 0xab, 0x31, 0x46, 0x07, 0xf3, 0xac,
	0x00, 0x3d, 0x9f, 0x4b, 0xf4, 0xb5, 0x4a, 0x39, 0x5f, 0x4b, 0xa8, 0xf5, 0x5c, 0x2e, 0x31, 0x42,
	0x2d, 0x39, 0x4e, 0xca, 0xaa, 0x80, 0x5a, 0xcf, 0xe3, 0x92, 0xad, 0x54, 0xf9, 0x73, 0x56, 0x4b,
	0x92, 0x48, 0xd0, 0xd3, 0xb8, 0xa4, 0xd5, 0xaa, 0x2b, 0x6a, 0x84, 0x46, 0x9e, 0xe9, 0xb2, 0x52,
	0x91, 0xd9, 0x2a, 0xd7, 0xe4, 0xc8, 0x10, 0x2b, 0x55, 0xde, 0x15, 0x24, 0x4b, 0x8d, 0x90, 0xc9,
	0xdb, 0x6a, 0xc5, 0xf4, 0x72, 0x08, 0x94, 0x7e, 0xdf, 0xb0, 0xad, 0x56, 0x89, 0xef, 0x69, 0x09,
	0x0a, 0x1d, 0x9b, 0x44, 0x2b, 0x75, 0xa2, 0xe0, 0xb9, 0x80, 0xba, 0xf6, 0x07, 0x81, 0x33, 0x1a,
	0x90, 0x56, 0x87, 0xdf, 0x1c, 0x34, 0x88, 0x16, 0x09, 0x63, 0x50, 0xd8, 0xdd, 0x3d, 0x41, 0x9d,
	0xf9, 0x85, 0xde, 0xd9, 0x01, 0xe9, 0xcc, 0x2f, 0xf0, 0x73, 0xf4, 0x30, 0x06, 0x96, 0xbd, 0x6b,
	0xa0, 0x81, 0x28, 0xa9, 0x92, 0x94, 0x4a, 0x73, 0x90, 0xba, 0xe4, 0x2e, 0xc0, 0x4f, 0xd1, 0xa0,
	0x2d, 0xc6, 0xf4, 0x33, 0xe8, 0x2d, 0xef, 0x92, 0xfd, 0xa2, 0x59, 0x11, 0xe5, 0x42, 0x45, 0x1d,
	0x68, 0x43, 0xab, 0x71, 0x88, 0x8e, 0x09, 0xa4, 0xc0, 0x64, 0xb1, 0x8e, 0x81, 0x49, 0xfb, 0x18,
	0xf6, 0x6a, 0xe1, 0x57, 0x07, 0x3d, 0x88, 0x38, 0x63, 0x90, 0xaa, 0xc7, 0x68, 0x17, 0x7e, 0x86,
	0xfa, 0xea, 0x2e, 0xea, 0xf8, 0x4a, 0x2e, 0xec, 0x8b, 0x71, 0x7f, 0xac, 0x5e, 0xb5, 0xdb, 0xc3,
	0x43, 0x76, 0x3d, 0xaa, 0x85, 0x40, 0xba, 0xda, 0xb6, 0x74, 0xfe, 0xd3, 0xb2, 0xe3, 0xc1, 0x63,
	0xe4, 0xd9, 0xfd, 0xaa, 0x7d, 0x37, 0x70, 0x47, 0xfd, 0x29, 0xd6, 0xfe, 0xbd, 0x4d, 0x24, 0xad,
	0xe7, 0x3c, 0xfa, 0xbe, 0x19, 0x3a, 0x3f, 0x36, 0x43, 0xe7, 0xd7, 0x66, 0xe8, 0x7c, 0xf9, 0x3d,
	0xbc, 0xf7, 0xf1, 0x2c, 0xa7, 0x72, 0xd1, 0x5c, 0x8f, 0x53, 0x5e, 0x4e, 0xb2, 0xa4, 0xaa, 0x0a,
	0xc8, 0x72, 0x10, 0x93, 0x19, 0x63, 0xd1, 0x22, 0xa1, 0x6c, 0x72, 0xf7, 0x73, 0x71, 0xdd, 0xd3,
	0xd7, 0x2f, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x2f, 0xa5, 0x2c, 0x4b, 0x04, 0x00, 0x00,
}

func (m *NodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Other) > 0 {
		for iNdEx := len(m.Other) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Other[iNdEx])
			copy(dAtA[i:], m.Other[iNdEx])
			i = encodeVarintP2P(dAtA, i, uint64(len(m.Other[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ListenAddr) > 0 {
		i -= len(m.ListenAddr)
		copy(dAtA[i:], m.ListenAddr)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.ListenAddr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RemoteAddr) > 0 {
		i -= len(m.RemoteAddr)
		copy(dAtA[i:], m.RemoteAddr)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.RemoteAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Network) > 0 {
		i -= len(m.Network)
		copy(dAtA[i:], m.Network)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Network)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SigndPubKey) > 0 {
		i -= len(m.SigndPubKey)
		copy(dAtA[i:], m.SigndPubKey)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.SigndPubKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.PubKey != nil {
		{
			size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FlowStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Progress != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x68
	}
	if m.TimeRem != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.TimeRem))
		i--
		dAtA[i] = 0x60
	}
	if m.BytesRem != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.BytesRem))
		i--
		dAtA[i] = 0x58
	}
	if m.PeakRate != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.PeakRate))
		i--
		dAtA[i] = 0x50
	}
	if m.AvgRate != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.AvgRate))
		i--
		dAtA[i] = 0x48
	}
	if m.CurRate != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.CurRate))
		i--
		dAtA[i] = 0x40
	}
	if m.InstRate != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.InstRate))
		i--
		dAtA[i] = 0x38
	}
	if m.Samples != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.Samples))
		i--
		dAtA[i] = 0x30
	}
	if m.Bytes != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.Bytes))
		i--
		dAtA[i] = 0x28
	}
	if m.Idle != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.Idle))
		i--
		dAtA[i] = 0x20
	}
	if m.Duration != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if m.Start != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x10
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChannelStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RecentlySent != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.RecentlySent))
		i--
		dAtA[i] = 0x28
	}
	if m.Priority != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x20
	}
	if m.SendQueueSize != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.SendQueueSize))
		i--
		dAtA[i] = 0x18
	}
	if m.SendQueueCapacity != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.SendQueueCapacity))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Channels) > 0 {
		for iNdEx := len(m.Channels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Channels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintP2P(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.RecvMonitor != nil {
		{
			size, err := m.RecvMonitor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SendMonitor != nil {
		{
			size, err := m.SendMonitor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintP2P(dAtA []byte, offset int, v uint64) int {
	offset -= sovP2P(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.SigndPubKey)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.RemoteAddr)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.ListenAddr)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	if len(m.Other) > 0 {
		for _, s := range m.Other {
			l = len(s)
			n += 1 + l + sovP2P(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlowStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Active {
		n += 2
	}
	if m.Start != 0 {
		n += 1 + sovP2P(uint64(m.Start))
	}
	if m.Duration != 0 {
		n += 1 + sovP2P(uint64(m.Duration))
	}
	if m.Idle != 0 {
		n += 1 + sovP2P(uint64(m.Idle))
	}
	if m.Bytes != 0 {
		n += 1 + sovP2P(uint64(m.Bytes))
	}
	if m.Samples != 0 {
		n += 1 + sovP2P(uint64(m.Samples))
	}
	if m.InstRate != 0 {
		n += 1 + sovP2P(uint64(m.InstRate))
	}
	if m.CurRate != 0 {
		n += 1 + sovP2P(uint64(m.CurRate))
	}
	if m.AvgRate != 0 {
		n += 1 + sovP2P(uint64(m.AvgRate))
	}
	if m.PeakRate != 0 {
		n += 1 + sovP2P(uint64(m.PeakRate))
	}
	if m.BytesRem != 0 {
		n += 1 + sovP2P(uint64(m.BytesRem))
	}
	if m.TimeRem != 0 {
		n += 1 + sovP2P(uint64(m.TimeRem))
	}
	if m.Progress != 0 {
		n += 1 + sovP2P(uint64(m.Progress))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovP2P(uint64(m.ID))
	}
	if m.SendQueueCapacity != 0 {
		n += 1 + sovP2P(uint64(m.SendQueueCapacity))
	}
	if m.SendQueueSize != 0 {
		n += 1 + sovP2P(uint64(m.SendQueueSize))
	}
	if m.Priority != 0 {
		n += 1 + sovP2P(uint64(m.Priority))
	}
	if m.RecentlySent != 0 {
		n += 1 + sovP2P(uint64(m.RecentlySent))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnectionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendMonitor != nil {
		l = m.SendMonitor.Size()
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.RecvMonitor != nil {
		l = m.RecvMonitor.Size()
		n += 1 + l + sovP2P(uint64(l))
	}
	if len(m.Channels) > 0 {
		for _, e := range m.Channels {
			l = e.Size()
			n += 1 + l + sovP2P(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovP2P(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozP2P(x uint64) (n int) {
	return sovP2P(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &crypto.PubKey{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigndPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigndPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListenAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Other = append(m.Other, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idle", wireType)
			}
			m.Idle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idle |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Samples", wireType)
			}
			m.Samples = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Samples |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstRate", wireType)
			}
			m.InstRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurRate", wireType)
			}
			m.CurRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgRate", wireType)
			}
			m.AvgRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvgRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeakRate", wireType)
			}
			m.PeakRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeakRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesRem", wireType)
			}
			m.BytesRem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesRem |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeRem", wireType)
			}
			m.TimeRem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeRem |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendQueueCapacity", wireType)
			}
			m.SendQueueCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendQueueCapacity |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendQueueSize", wireType)
			}
			m.SendQueueSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendQueueSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentlySent", wireType)
			}
			m.RecentlySent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecentlySent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMonitor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SendMonitor == nil {
				m.SendMonitor = &FlowStatus{}
			}
			if err := m.SendMonitor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvMonitor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecvMonitor == nil {
				m.RecvMonitor = &FlowStatus{}
			}
			if err := m.RecvMonitor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, &ChannelStatus{})
			if err := m.Channels[len(m.Channels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipP2P(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthP2P
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupP2P
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthP2P
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthP2P        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowP2P          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupP2P = fmt.Errorf("proto: unexpected end of group")
)
