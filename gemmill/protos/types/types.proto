syntax = "proto3";

package types;
option go_package ="github.com/dappledger/AnnChain/gemmill/protos/types";
import "gemmill/protos/crypto/crypto.proto";

message TxData{
	uint64 Nonce = 1;
	bytes Recipient = 2;
	bytes Amount = 3;
	bytes Payload = 4;
}

message Transaction{
	TxData Data = 1;
	crypto.PubKey Pubkey = 2;
	bytes Signature = 3;
}

///////////////////////////////////////////////////

message PartSetHeader {
	int32  Total = 1;
	bytes Hash = 2;
}

message SimpleProof{
	repeated bytes bytes = 1;
}

message Part {
	int32 Index = 1;
	bytes Bytes = 2;
	SimpleProof Proof = 3;
}

message BlockID {
	bytes Hash= 1;
	PartSetHeader PartsHeader = 2;
}

message ProposalData{
	int64 Height = 1;
	int64 Round = 2;
	PartSetHeader BlockPartsHeader = 3;
	int64 POLRound = 4;
	BlockID POLBlockID = 5;
}

message Proposal{
	ProposalData Data = 1;
	bytes Signature = 2;
}

enum VoteType{
	None = 0;
	Prevote = 1;
	Precommit = 2;
}

message VoteData{
	bytes ValidatorAddress = 1;
	int64 ValidatorIndex = 2;
	int64 Height = 3;
	int64 Round = 4;
	VoteType Type = 5;
	BlockID BlockID = 6;
}

message Vote{
	bytes ValidatorAddress = 1;
	int32 ValidatorIndex = 2;
	int64 Height = 3;
	int64 Round = 4;
	VoteType Type = 5;
	BlockID BlockID = 6;
	crypto.Signature Signature = 7;
}

message SignableBase{
	string ChainID = 1;
	bytes Data = 2;
}

/////////////////////////////////////////////////////

message Header{
	string ChainID = 1;
	int64 Height = 2;
	int64 Time = 3;
	int64 NumTxs = 4;
	bytes Maker = 5;
	BlockID LastBlockID = 6;
	bytes LastCommitHash = 7;
	bytes DataHash = 8;
	bytes ValidatorsHash = 9;
	bytes AppHash = 10;
	bytes ReceiptsHash = 11;
	bytes ProposerAddress = 12;
	bytes Extra = 13;
}

message Data{
	repeated bytes Txs = 1; 		
	repeated bytes ExTxs = 2;
	bytes Hash = 3;
}

message Commit{
	BlockID BlockID = 1;
	repeated Vote Precommits = 2;
}

message Block{
	Header Header = 1;
	Data Data = 2;
	Commit LastCommit = 3;
}

message BlockMeta{
	bytes Hash = 1;
	Header Header = 2;
	PartSetHeader PartsHeader = 3;
}

message ValidatorSet{
	repeated Validator VSet = 1;
}

message Validator {
	bytes Address = 1;
	crypto.PubKey Pubkey = 2;
	int64 VotingPower = 3;
	int64 Accum = 4;
	bool IsCA = 5;
}

message GenesisValidator  {
	crypto.PubKey Pubkey = 1;
	int64 Amount = 2;
	string Name = 3;
	bool IsCA = 4;
	string RPCAddress = 5 ;
}

message GenesisDoc {
	int64	GenesisTime  = 1;
	string ChainID    = 2;
	repeated    GenesisValidator Validators = 3 ;
	bytes AppHash           =4 ;
	string Plugins              =5;
}


message Result {
	CodeType Code = 1;
	bytes Data = 2;
	string Log = 3;	
}

/////////////////////////////////////////////////////

//----------------------------------------
// Code types

enum CodeType {
  OK                    = 0;

  // General response codes, 0 ~ 99
  InternalError         = 1;
  EncodingError         = 2;
  BadNonce              = 3;
  Unauthorized          = 4;
  InsufficientFunds     = 5;
  UnknownRequest        = 6;
  InvalidTx 		= 7;

  // Reserved for basecoin, 100 ~ 199
  BaseDuplicateAddress  = 101;
  BaseEncodingError     = 102;
  BaseInsufficientFees  = 103;
  BaseInsufficientFunds = 104;
  BaseInsufficientGasPrice = 105;
  BaseInvalidInput      = 106;
  BaseInvalidOutput     = 107;
  BaseInvalidPubKey     = 108;
  BaseInvalidSequence   = 109;
  BaseInvalidSignature  = 110;
  BaseUnknownAddress    = 111;
  BaseUnknownPubKey     = 112;
  BaseUnknownPlugin     = 113;
  WrongRLP              = 114;
  SaveFailed            = 115;

  // Reserved for governance, 200 ~ 299
  GovUnknownEntity      = 201;
  GovUnknownGroup       = 202;
  GovUnknownProposal    = 203;
  GovDuplicateGroup     = 204;
  GovDuplicateMember    = 205;
  GovDuplicateProposal  = 206;
  GovDuplicateVote      = 207;
  GovInvalidMember      = 208;
  GovInvalidVote        = 209;
  GovInvalidVotingPower = 210;
}
